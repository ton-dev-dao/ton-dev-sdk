initSidebarItems({"enum":[["ErrorCode",""]],"fn":[["chacha20","Performs symmetric `chacha20` encryption."],["convert_public_key_to_ton_safe_format","Converts public key to ton safe_format"],["default_hdkey_compliant",""],["default_hdkey_derivation_path",""],["default_mnemonic_dictionary",""],["default_mnemonic_word_count",""],["encryption_box_decrypt","Decrypts data using given encryption box"],["encryption_box_encrypt","Encrypts data using given encryption box"],["encryption_box_get_info","Queries info from the given encryption box"],["factorize","Integer factorization"],["generate_random_bytes","Generates random byte array of the specified length and returns it in `base64` format"],["generate_random_sign_keys","Generates random ed25519 key pair."],["get_signing_box","Creates a default signing box implementation."],["hdkey_derive_from_xprv","Returns extended private key derived from the specified extended private key and child index"],["hdkey_derive_from_xprv_path","Derives the extended private key from the specified key and path"],["hdkey_public_from_xprv","Extracts the public key from the serialized extended private key"],["hdkey_secret_from_xprv","Extracts the private key from the serialized extended private key"],["hdkey_xprv_from_mnemonic","Generates an extended master private key that will be the root for all the derived keys"],["mnemonic_derive_sign_keys","Derives a key pair for signing from the seed phrase"],["mnemonic_from_entropy","Generates mnemonic from pre-generated entropy"],["mnemonic_from_random","Generates a random mnemonic"],["mnemonic_verify","Validates a mnemonic phrase"],["mnemonic_words","Prints the list of words from the specified dictionary"],["modular_power","Modular exponentiation"],["nacl_box","Public key authenticated encryption"],["nacl_box_keypair","Generates a random NaCl key pair"],["nacl_box_keypair_from_secret_key","Generates key pair from a secret key"],["nacl_box_open","Decrypt and verify the cipher text using the receivers secret key, the senders public key, and the nonce."],["nacl_secret_box","Encrypt and authenticate message using nonce and secret key."],["nacl_secret_box_open","Decrypts and verifies cipher text using `nonce` and secret `key`."],["nacl_sign","Signs data using the signerâ€™s secret key."],["nacl_sign_detached","Signs the message using the secret key and returns a signature."],["nacl_sign_detached_verify","Verifies the signature with public key and `unsigned` data."],["nacl_sign_keypair_from_secret_key","Generates a key pair for signing from the secret key"],["nacl_sign_open","Verifies the signature and returns the unsigned message"],["register_encryption_box","Registers an application implemented encryption box."],["register_signing_box","Registers an application implemented signing box."],["remove_encryption_box","Removes encryption box from SDK"],["remove_signing_box","Removes signing box from SDK."],["scrypt","Perform `scrypt` encryption"],["sha256","Calculates SHA256 hash of the specified data."],["sha512","Calculates SHA512 hash of the specified data."],["sign","Signs a data using the provided keys."],["signing_box_get_public_key","Returns public key of signing key pair."],["signing_box_sign","Returns signed user data."],["ton_crc16","Calculates CRC16 using TON algorithm."],["verify_signature","Verifies signed data using the provided public key. Raises error if verification is failed."]],"struct":[["CryptoConfig","Crypto config."],["EncryptionBoxHandle",""],["EncryptionBoxInfo","Encryption box information"],["Error",""],["KeyPair",""],["ParamsOfChaCha20",""],["ParamsOfConvertPublicKeyToTonSafeFormat",""],["ParamsOfEncryptionBoxDecrypt",""],["ParamsOfEncryptionBoxEncrypt",""],["ParamsOfEncryptionBoxGetInfo",""],["ParamsOfFactorize",""],["ParamsOfGenerateRandomBytes",""],["ParamsOfHDKeyDeriveFromXPrv",""],["ParamsOfHDKeyDeriveFromXPrvPath",""],["ParamsOfHDKeyPublicFromXPrv",""],["ParamsOfHDKeySecretFromXPrv",""],["ParamsOfHDKeyXPrvFromMnemonic",""],["ParamsOfHash",""],["ParamsOfMnemonicDeriveSignKeys",""],["ParamsOfMnemonicFromEntropy",""],["ParamsOfMnemonicFromRandom",""],["ParamsOfMnemonicVerify",""],["ParamsOfMnemonicWords",""],["ParamsOfModularPower",""],["ParamsOfNaclBox",""],["ParamsOfNaclBoxKeyPairFromSecret",""],["ParamsOfNaclBoxOpen",""],["ParamsOfNaclSecretBox",""],["ParamsOfNaclSecretBoxOpen",""],["ParamsOfNaclSign",""],["ParamsOfNaclSignDetached",""],["ParamsOfNaclSignDetachedVerify",""],["ParamsOfNaclSignKeyPairFromSecret",""],["ParamsOfNaclSignOpen",""],["ParamsOfScrypt",""],["ParamsOfSign",""],["ParamsOfSigningBoxSign",""],["ParamsOfTonCrc16",""],["ParamsOfVerifySignature",""],["RegisteredEncryptionBox",""],["RegisteredSigningBox",""],["ResultOfChaCha20",""],["ResultOfConvertPublicKeyToTonSafeFormat",""],["ResultOfEncryptionBoxDecrypt",""],["ResultOfEncryptionBoxEncrypt",""],["ResultOfEncryptionBoxGetInfo",""],["ResultOfFactorize",""],["ResultOfGenerateRandomBytes",""],["ResultOfHDKeyDeriveFromXPrv",""],["ResultOfHDKeyDeriveFromXPrvPath",""],["ResultOfHDKeyPublicFromXPrv",""],["ResultOfHDKeySecretFromXPrv",""],["ResultOfHDKeyXPrvFromMnemonic",""],["ResultOfHash",""],["ResultOfMnemonicFromEntropy",""],["ResultOfMnemonicFromRandom",""],["ResultOfMnemonicVerify",""],["ResultOfMnemonicWords",""],["ResultOfModularPower",""],["ResultOfNaclBox",""],["ResultOfNaclBoxOpen",""],["ResultOfNaclSign",""],["ResultOfNaclSignDetached",""],["ResultOfNaclSignDetachedVerify",""],["ResultOfNaclSignOpen",""],["ResultOfScrypt",""],["ResultOfSign",""],["ResultOfSigningBoxGetPublicKey",""],["ResultOfSigningBoxSign",""],["ResultOfTonCrc16",""],["ResultOfVerifySignature",""],["SigningBoxHandle",""]],"trait":[["SigningBox",""]]});